<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>johnyeary.com/</title>
   
   <link>https://johnyeary.com</link>
   <description>A Caffeinated Java Developer.</description>
   <language>en-us</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Resolutions</title>
	  <link>//2020-01-01-resolution.html</link>
	  <author></author>
	  <pubDate>2020-01-01T00:00:00+00:00</pubDate>
	  <guid>//2020-01-01-resolution.html</guid>
	  <description><![CDATA[
	     <h1 id="do-achievable-things">Do Achievable Things!</h1>

<p>Every year most people make resolutions to do things like lose weight, eat more at home, travel, etc. After
some period of time most of those resolutions follow the way of the dinosaur. This year my New Year’s resolution
is to <strong>Do Achievable Things</strong>. This phrase is meant to act as a reminder to make decisions to do things that you can feel
a sense of success. Pick small tasks like walk daily, or run a mile. These small acts add up over time and builds upon success after success.</p>

<p>This last year I lost 30 lbs. I was running everyday, and switched over to a training plan to run a half-marathon this month. Unfortunately, I got a really bad
cold with bronchitis which totally derailed my running and training. The goal was reachable, but forces outside my control are going to make this goal unreachable
this month. Once I am back to being healthy, I will achieve this goal.</p>

<p>One of the goals I have is to migrate my blog from Wordpress over to Github, and to write more frequently. Let’s see how that works out by the end of 2020.</p>

<p>Happy New Year 2020.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Programming Merit Badge</title>
	  <link>//2019-11-09-programming-merit-badge.html</link>
	  <author></author>
	  <pubDate>2019-11-09T00:00:00+00:00</pubDate>
	  <guid>//2019-11-09-programming-merit-badge.html</guid>
	  <description><![CDATA[
	     <h2 id="the-next-generation-of-developers">The Next Generation of Developers</h2>

<p>This is the 4th year I have taught the Programming Merit Badge to Boy Scouts in the Southbounder District of the Blue Ridge Council in Greenville, SC. I consider it quite an honor to be asked to do it for this many years. The Boy Scout program was instrumental in my development as a boy. This has been my way of paying it forward to the next generation. My oldest son is an Eagle Scout, and my youngest is well into his journey at this point.</p>

<p>I have been a Boy Scout Assistant Scout Master, Unit Commissioner, Roundtable Commissioner, Cub Master, and a Den Leader. The most fulfilling part of my Scouting experience as an adult was Cub Master. I still think I am a 9 year old boy at heart. If you have not considered working with kids whether in Scouting, or another youth program, give it a chance. You will feel rewarded and humbled by the experience. I think I have learned more from the scouts than I have taught them.</p>

<h2 id="programming-merit-badge">Programming Merit Badge</h2>

<p>There are key elements that must be completed, and these will change over time as the program evolves. They broadly include safety, history, general knowledge, and coding. A key element that must be completed for all the participants is the Boy Scout Cyber Chip. At the time of this writing, it must be renewed yearly, and covers different age groups.</p>

<h3 id="safety">Safety</h3>

<p>This topic can be exciting if you can make a connection with the scouts on the topic. I am a gamer, so I am guilty of doing a lot of bad things with regards to ergomonics while playing games. When I relate my experiences, I get instant feedback of “Wow… me too!” Building that sense of espirit de corps with the scouts makes a tough topic interesting. They also become curious about what games I play. I also make mods for games which helps me to relate with them.</p>

<h3 id="history">History</h3>

<p>We can’t talk about where we are without knowing where we have been. I enjoy this section, and the scouts and parents who are present seem to enjoy it as well. I think my side bars about various items like the story of Grace Hopper and computer bugs make them laugh. If you don’t know the story, do a quick search on Google.</p>

<h3 id="general-knowledge">General Knowledge</h3>

<p>I talk about the languages and usage with examples. The legal section on copyrights, patents, trademarks, and trade secrets (though really important) is one section that causes obvious glaze on their faces. Thankfully, I have a really cool career to get them talking: cryptanalyist.</p>

<h3 id="code">Code</h3>

<p>This is what the scouts are here to learn. I talk about some basics of how to code with tools like <code class="highlighter-rouge">notepad</code>, a terminal, and <code class="highlighter-rouge">javac</code>. I show them some of the pitfalls of this approach. It does not take a lot of effort to prove this point. Then I show them how to use the <a href="https://netbeans.apache.org/">Apache Netbeans IDE</a> to do development. If you are teaching programming, the clear choice is <a href="https://netbeans.apache.org/">Apache Netbeans IDE</a> for development. The hurdles to learning to use it are minimal. The scouts caught on quickly, and the few shortcut keys I taught them were used in earnest.</p>

<p>My goal was to teach them to code beyond the basic “Hello World!”. I have an example on how to calculate where <code class="highlighter-rouge">x</code> crosses the <code class="highlighter-rouge">x-axis</code> using the equation of a line: <script type="math/tex">y=mx+b</script></p>

<h2 id="references">References</h2>

<ol>
  <li><a href="https://www.dropbox.com/s/si8knmvagx73e98/Programming%20Merit%20Badge%20-%20Module%201%20-%20Safety.pptx?dl=0">Programming Merit Badge - Module 1 - Safety</a></li>
  <li><a href="https://www.dropbox.com/s/njle8szc42fhx6q/Programming%20Merit%20Badge%20-%20Module%202%20-%20History.pptx?dl=0">Programming Merit Badge - Module 2 - History</a></li>
  <li><a href="https://www.dropbox.com/s/732eprnflk56x8o/Programming%20Merit%20Badge%20-%20Module%203%20-%20General%20Knowledge.pptx?dl=0">Programming Merit Badge - Module 3 - General Knowledge</a></li>
  <li><a href="https://www.dropbox.com/s/p451sp1ey4teroo/Programming%20Merit%20Badge%20-%20Module%204%20-%20Code.pptx?dl=0">Programming Merit Badge - Module 4 - Code</a></li>
</ol>

	  ]]></description>
	</item>

	<item>
	  <title>Blog Migration</title>
	  <link>//2019-11-01-blog-migration.html</link>
	  <author></author>
	  <pubDate>2019-11-01T00:00:00+00:00</pubDate>
	  <guid>//2019-11-01-blog-migration.html</guid>
	  <description><![CDATA[
	     <h2 id="introduction">Introduction</h2>

<p>After a couple of years using Wordpress, I have found that constantly upgrading, broken plugins, managing a database, backups, and security certificates have brought me back to Github.</p>

<p>When I first started the blogging journey, I wanted a text editor which I could use to create my posts. Over the years, I have found myself using <a href="https://www.markdownguide.org/">Markdown</a> at first for my Github projects, and finally for all of my work. This includes taking all my notes using Markdown.</p>

<p>I decided to come back and take a look at GitHub, and reconsider my previous position of it not being the right fit for me. Today, I think it is a perfect fit. The platform has been enhanced, and a number of great templates have been created to make using it a lot easier. That said, a number of the templates are <strong>not</strong> non-technical user friendly. I have had some challenges getting the blog back off the ground using Github, but I think that the final results will be worth it.</p>

<p>Over the next few weeks, I will begin the slow process of migrating the old blog pages over to Github, and adding new content. As I begin this journey, I will tell you how I did it.</p>

<h2 id="decisions">Decisions</h2>

<p>If you are not comfortable in <a href="https://www.markdownguide.org/">Markdown</a> then using Github pages are not for you. You have to decide if you want to learn it, and use it. Otherwise the risk is that you will <strong>not</strong> blog which is the opposite of your objective.</p>

<p>If you have a blog already, then you need to decide if you want to do the work to migrate it. This could be an enormous undertaking if you have been doing it for years. It also could be something that you may not want to do. I have another blog <a href="http://javaevangelist.blogspot.com/">Java Evangelist John Yeary</a> which is quite large. I wrote it on Blogger, and decided that I <strong>did not</strong> want to move it. It was established, and profitible. I did decide years ago that I wanted to move it from a propietary platform and make it more “my own”. Thus I created a blog simply called John Yeary. That is the blog we are going to be migrating.</p>

<h2 id="first-steps">First Steps</h2>

<p>The first step in getting started in creating, or migrating a blog is to find a good template to use. You can go all-in on creating your own using, but even <a href="https://jekyllrb.com/">jekyll</a> uses a basic template called <em>minima</em> when you create a simple site using the tutorial.</p>

<p>I chose a template based on the popular <a href="https://ghost.org/blog/">ghost</a> platform called <a href="https://github.com/jekyller/jasper">Jasper</a>. There is another version called <a href="https://github.com/jekyller/jasper2">Jasper 2</a>, but I found the original Jasper version more my style.</p>

<p>The nice thing about choosing to use an open source template is that you are free to modify it to match your needs. This was not insurmountable in Wordpress, but much more challenging. I was also in fear of the template being upgraded that would make me have to figure out what changed, and if anything was broken. Since we are using a source control system (git) and we can control our own destiny with regards to upgrades, then the worries about template changes from Wordpress are no longer an issue.</p>

<p>Next, I would make sure that you understand what the templates do and how they are configured. The <a href="https://jekyllrb.com/docs/">Jekyll Quickstart</a> is very good. It will give you a great foundation on how Jekyll generates the pages, and displays them.</p>

<p>In my case I chose to use <a href="https://github.com/jekyller/jasper">Jasper</a> for my templates. This template uses plugins to generate additional functionality on the pages, as a result it can not be used directly for generating my pages from Github. In this case, I am using <a href="https://travis-ci.com/">Travis CI</a> to build the the pages and push the changes from a development branch to the <code class="highlighter-rouge">master</code> branch since this is the branch which is used to deploy the pages. In my case it is only merging the <code class="highlighter-rouge">_site</code> data.</p>

<h2 id="migrating-existing-pages">Migrating Existing Pages</h2>

<p>There are a number of mechanisms to import existing blog formats into Jekyll. They can be found on the <a href="https://import.jekyllrb.com/docs/home/">Jekyll Import Documentation</a>. I am migrating from Wordpress so I tried a couple of different mechanisms. Although, it mentions the Wordpress.com importers for use with the online site, I found them to be useful on the self-hosted variety I was using. The best one after trying them all was <a href="https://github.com/thomasf/exitwp">Exitwp</a>.</p>

<p>I found that not just one tool worked for me, and I am going to have to use multiple results and merge them to get the pages migrated.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Multiple Java Persistence API (JPA) persistence.xml Merging</title>
	  <link>//2019-10-15-multiple-java-persistence-api-jpa-persistence-xml-merging.html</link>
	  <author></author>
	  <pubDate>2019-10-15T15:50:47+00:00</pubDate>
	  <guid>//2019-10-15-multiple-java-persistence-api-jpa-persistence-xml-merging.html</guid>
	  <description><![CDATA[
	     <h2 id="introduction">Introduction</h2>

<p>Java Persistence API (JPA) is a great technology for combining the power of Java and data persistence. The specification goes a long way from the days of using EJB 1.0 for data management, but still comes with some limitations. One of them is using multiple jars that may contain <em>persistence.xml</em> files. The current limitation is that the first <em>persistence.xml</em> file that is found, is loaded by the <code class="highlighter-rouge">Classloader</code>, and the others are ignored.</p>

<p>The code below is used to get around this limitation by proxying the <code class="highlighter-rouge">Classloader</code>, scanning the jars for <em>persistence.xml</em> files and combining them into one file for the <code class="highlighter-rouge">Classloader</code> to load.</p>

<p>The original idea came from Fabrizio Giudici so I can not claim this as my own. The code below is based on his great work. My enhancements to his code are removal of duplicate classes that may be included in the multiple <em>persistence.xml</em> files, and the use of a Random Access Memory (RAM) file system to merge the files.</p>

<h1 id="code">Code</h1>

<p>The code will work on Java 8, but the changes in later versions of Java around class loading may prevent us from using this clever trick.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">bluelotussoftware</span><span class="o">.</span><span class="na">persistence</span><span class="o">;</span>
    
    <span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">java.io.InputStream</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">java.io.OutputStream</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">java.io.StringWriter</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">java.net.URL</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">java.nio.charset.Charset</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">java.text.MessageFormat</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">java.util.Collection</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">java.util.Collections</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">java.util.Enumeration</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">java.util.Iterator</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">javax.xml.parsers.DocumentBuilder</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">javax.xml.parsers.DocumentBuilderFactory</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">javax.xml.parsers.ParserConfigurationException</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">javax.xml.transform.Transformer</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">javax.xml.transform.TransformerConfigurationException</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">javax.xml.transform.TransformerException</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">javax.xml.transform.TransformerFactory</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">javax.xml.transform.dom.DOMSource</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">javax.xml.transform.stream.StreamResult</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">javax.xml.xpath.XPath</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">javax.xml.xpath.XPathConstants</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">javax.xml.xpath.XPathExpression</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">javax.xml.xpath.XPathExpressionException</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">javax.xml.xpath.XPathFactory</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">org.apache.commons.io.IOUtils</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">org.apache.commons.vfs2.FileObject</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">org.apache.commons.vfs2.FileSystemException</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">org.apache.commons.vfs2.FileSystemManager</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">org.apache.commons.vfs2.VFS</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">org.apache.log4j.Logger</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">org.w3c.dom.Document</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">org.w3c.dom.Node</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">org.w3c.dom.NodeList</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">org.xml.sax.SAXException</span><span class="o">;</span>
    
    <span class="cm">/**
     * @author Fabrizio Giudici
     * @author John Yeary &lt;jyeary@bluelotussoftware.com&gt;
     * @version 1.0.0
     */</span>
    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">PersistenceClassLoader</span> <span class="kd">extends</span> <span class="nc">ClassLoader</span> <span class="o">{</span>
    
        <span class="kd">private</span> <span class="kd">final</span> <span class="nc">ClassLoader</span> <span class="n">parent</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="no">LOGGER</span> <span class="o">=</span> <span class="nc">Logger</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">PersistenceClassLoader</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">DocumentBuilderFactory</span> <span class="no">DOCUMENT_BUILDER_FACTORY</span> <span class="o">=</span> <span class="nc">DocumentBuilderFactory</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span>
        <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">XPathFactory</span> <span class="no">XPATH_FACTORY</span> <span class="o">=</span> <span class="nc">XPathFactory</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span>
        <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">XPath</span> <span class="no">XPATH</span> <span class="o">=</span> <span class="no">XPATH_FACTORY</span><span class="o">.</span><span class="na">newXPath</span><span class="o">();</span>
        <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">XPathExpression</span> <span class="no">XPATH_ENTITY_PU_NODE</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">XPathExpression</span> <span class="no">XPATH_PROPERTIES_NODE</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">XPathExpression</span> <span class="no">XPATH_ENTITY_CLASS_TEXT</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">PERSISTENCE_XML</span> <span class="o">=</span> <span class="s">"META-INF/persistence.xml"</span><span class="o">;</span>
        <span class="kd">private</span> <span class="no">URL</span> <span class="n">mergedPersistenceXml</span><span class="o">;</span>
    
        <span class="kd">static</span> <span class="o">{</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="no">XPATH_ENTITY_PU_NODE</span> <span class="o">=</span> <span class="no">XPATH</span><span class="o">.</span><span class="na">compile</span><span class="o">(</span><span class="s">"//persistence/persistence-unit"</span><span class="o">);</span>
                <span class="no">XPATH_PROPERTIES_NODE</span> <span class="o">=</span> <span class="no">XPATH</span><span class="o">.</span><span class="na">compile</span><span class="o">(</span><span class="s">"//persistence/persistence-unit/properties"</span><span class="o">);</span>
                <span class="no">XPATH_ENTITY_CLASS_TEXT</span> <span class="o">=</span> <span class="no">XPATH</span><span class="o">.</span><span class="na">compile</span><span class="o">(</span><span class="s">"//persistence/persistence-unit/class/text()"</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">XPathExpressionException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ExceptionInInitializerError</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    
        <span class="cm">/**
         * Constructor that wraps the provided {@link ClassLoader}
         *
         * @param parent The parent {@link ClassLoader} to wrap.
         */</span>
        <span class="kd">public</span> <span class="nf">PersistenceClassLoader</span><span class="o">(</span><span class="kd">final</span> <span class="nc">ClassLoader</span> <span class="n">parent</span><span class="o">)</span> <span class="o">{</span>
            <span class="kd">super</span><span class="o">(</span><span class="n">parent</span><span class="o">);</span>
            <span class="k">this</span><span class="o">.</span><span class="na">parent</span> <span class="o">=</span> <span class="n">parent</span><span class="o">;</span>
        <span class="o">}</span>
    
        <span class="cm">/**
         * {@inheritDoc}
         * &lt;p&gt;
         * This handles setting the {@literal persistence.xml} from multiple {@literal META-INF/persistence.xml} files using
         * the same persistence unit.&lt;/p&gt;
         */</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="nc">Enumeration</span><span class="o">&lt;</span><span class="no">URL</span><span class="o">&gt;</span> <span class="nf">getResources</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="no">PERSISTENCE_XML</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">name</span><span class="o">))</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">mergedPersistenceXml</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">try</span> <span class="o">{</span>
                        <span class="nc">String</span> <span class="n">merged</span> <span class="o">=</span> <span class="n">scanPersistenceXML</span><span class="o">();</span>
                        <span class="no">LOGGER</span><span class="o">.</span><span class="na">trace</span><span class="o">(</span><span class="n">merged</span><span class="o">);</span>
                        <span class="n">mergedPersistenceXml</span> <span class="o">=</span> <span class="n">getMergedURL</span><span class="o">(</span><span class="n">merged</span><span class="o">);</span>
                        <span class="no">LOGGER</span><span class="o">.</span><span class="na">trace</span><span class="o">(</span><span class="nc">MessageFormat</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"Merged persistence.xml URL: {0}"</span><span class="o">,</span> <span class="n">mergedPersistenceXml</span><span class="o">));</span>
                    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="o">|</span> <span class="nc">ParserConfigurationException</span> <span class="o">|</span> <span class="nc">SAXException</span> <span class="o">|</span> <span class="nc">XPathExpressionException</span> <span class="o">|</span> <span class="nc">TransformerException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
                        <span class="c1">//TODO Need to return the first persistence.xml file, or throw a new exception. This should be fatal.</span>
                        <span class="no">LOGGER</span><span class="o">.</span><span class="na">fatal</span><span class="o">(</span><span class="s">"Could not merge persistence.xml files"</span><span class="o">,</span> <span class="n">ex</span><span class="o">);</span>
                        <span class="k">return</span> <span class="n">parent</span><span class="o">.</span><span class="na">getResources</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
                    <span class="o">}</span>
                <span class="o">}</span>
                <span class="k">return</span> <span class="k">new</span> <span class="nc">Enumeration</span><span class="o">&lt;</span><span class="no">URL</span><span class="o">&gt;()</span> <span class="o">{</span>
                    <span class="no">URL</span> <span class="n">url</span> <span class="o">=</span> <span class="n">mergedPersistenceXml</span><span class="o">;</span>
    
                    <span class="nd">@Override</span>
                    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasMoreElements</span><span class="o">()</span> <span class="o">{</span>
                        <span class="k">return</span> <span class="n">url</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span>
                    <span class="o">}</span>
    
                    <span class="nd">@Override</span>
                    <span class="kd">public</span> <span class="no">URL</span> <span class="nf">nextElement</span><span class="o">()</span> <span class="o">{</span>
                        <span class="kd">final</span> <span class="no">URL</span> <span class="n">url2</span> <span class="o">=</span> <span class="n">url</span><span class="o">;</span>
                        <span class="n">url</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
                        <span class="k">return</span> <span class="n">url2</span><span class="o">;</span>
                    <span class="o">}</span>
                <span class="o">};</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">getResources</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    
        <span class="cm">/**
         * Scans the {@link ClassLoader#getResources(java.lang.String)} for {@literal persistence.xml} files.
         *
         * @return A {@code Collection&lt;URL} of {@literal persistence.xml} URLs.
         * @throws IOException If an exception occurs during processing.
         */</span>
        <span class="kd">public</span> <span class="nc">Collection</span><span class="o">&lt;</span><span class="no">URL</span><span class="o">&gt;</span> <span class="nf">findPersistenceXMLs</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
            <span class="kd">final</span> <span class="nc">Enumeration</span><span class="o">&lt;</span><span class="no">URL</span><span class="o">&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="kd">super</span><span class="o">.</span><span class="na">getResources</span><span class="o">(</span><span class="no">PERSISTENCE_XML</span><span class="o">);</span>
            <span class="k">return</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">list</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>
    
        <span class="cm">/**
         * Converts a {@link Document} to a {@code String}.
         *
         * @param document The document to convert.
         * @return A {@code String} representation of the document if the conversion was successful, and {@literal null}
         * otherwise.
         */</span>
        <span class="kd">private</span> <span class="nc">String</span> <span class="nf">documentToString</span><span class="o">(</span><span class="kd">final</span> <span class="nc">Document</span> <span class="n">document</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="nc">DOMSource</span> <span class="n">source</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DOMSource</span><span class="o">(</span><span class="n">document</span><span class="o">);</span>
                <span class="nc">StringWriter</span> <span class="n">writer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringWriter</span><span class="o">();</span>
                <span class="nc">StreamResult</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StreamResult</span><span class="o">(</span><span class="n">writer</span><span class="o">);</span>
                <span class="nc">TransformerFactory</span> <span class="n">tf</span> <span class="o">=</span> <span class="nc">TransformerFactory</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span>
                <span class="nc">Transformer</span> <span class="n">transformer</span> <span class="o">=</span> <span class="n">tf</span><span class="o">.</span><span class="na">newTransformer</span><span class="o">();</span>
                <span class="n">transformer</span><span class="o">.</span><span class="na">transform</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
                <span class="k">return</span> <span class="n">writer</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">TransformerException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
                <span class="no">LOGGER</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">"Could not convert Document to String"</span><span class="o">,</span> <span class="n">ex</span><span class="o">);</span>
                <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
    
        <span class="cm">/**
         * This method creates the merged {@literal persistence.xml} file from all of {@literal persistence.xml} files found
         * by the {@link ClassLoader} during its scan and constructs a {@link Document} containing the merged
         * {@literal &lt;class&gt;} elements.
         *
         * @return A {@code String} representation of the {@link Document} that was generated.
         */</span>
        <span class="kd">private</span> <span class="nc">String</span> <span class="nf">scanPersistenceXML</span><span class="o">()</span>
                <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">,</span>
                <span class="nc">ParserConfigurationException</span><span class="o">,</span>
                <span class="nc">SAXException</span><span class="o">,</span>
                <span class="nc">XPathExpressionException</span><span class="o">,</span>
                <span class="nc">TransformerConfigurationException</span><span class="o">,</span>
                <span class="nc">TransformerException</span> <span class="o">{</span>
            <span class="no">LOGGER</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"scanPersistenceXML()"</span><span class="o">);</span>
            <span class="kd">final</span> <span class="nc">DocumentBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="no">DOCUMENT_BUILDER_FACTORY</span><span class="o">.</span><span class="na">newDocumentBuilder</span><span class="o">();</span>
            <span class="no">DOCUMENT_BUILDER_FACTORY</span><span class="o">.</span><span class="na">setNamespaceAware</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
            <span class="nc">Collection</span><span class="o">&lt;</span><span class="no">URL</span><span class="o">&gt;</span> <span class="n">persistenceXMlUrls</span> <span class="o">=</span> <span class="n">findPersistenceXMLs</span><span class="o">();</span>
    
            <span class="nc">Iterator</span><span class="o">&lt;</span><span class="no">URL</span><span class="o">&gt;</span> <span class="n">it</span> <span class="o">=</span> <span class="n">persistenceXMlUrls</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
            <span class="kd">final</span> <span class="no">URL</span> <span class="n">masterURL</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
            <span class="n">it</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
    
            <span class="no">LOGGER</span><span class="o">.</span><span class="na">trace</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"&gt;&gt;&gt;&gt; master persistence.xml: %s"</span><span class="o">,</span> <span class="n">masterURL</span><span class="o">));</span>
            <span class="kd">final</span> <span class="nc">Document</span> <span class="n">masterDocument</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">masterURL</span><span class="o">.</span><span class="na">toExternalForm</span><span class="o">());</span>
            <span class="kd">final</span> <span class="nc">Node</span> <span class="n">puNode</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Node</span><span class="o">)</span> <span class="no">XPATH_ENTITY_PU_NODE</span><span class="o">.</span><span class="na">evaluate</span><span class="o">(</span><span class="n">masterDocument</span><span class="o">,</span> <span class="nc">XPathConstants</span><span class="o">.</span><span class="na">NODE</span><span class="o">);</span>
            <span class="kd">final</span> <span class="nc">Node</span> <span class="n">propertiesNode</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Node</span><span class="o">)</span> <span class="no">XPATH_PROPERTIES_NODE</span><span class="o">.</span><span class="na">evaluate</span><span class="o">(</span><span class="n">masterDocument</span><span class="o">,</span> <span class="nc">XPathConstants</span><span class="o">.</span><span class="na">NODE</span><span class="o">);</span>
    
            <span class="k">for</span> <span class="o">(</span><span class="kd">final</span> <span class="no">URL</span> <span class="n">url</span> <span class="o">:</span> <span class="n">persistenceXMlUrls</span><span class="o">)</span> <span class="o">{</span>
                <span class="no">LOGGER</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"&gt;&gt;&gt;&gt; other persistence.xml: %s"</span><span class="o">,</span> <span class="n">url</span><span class="o">));</span>
                <span class="kd">final</span> <span class="nc">Document</span> <span class="n">document</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">url</span><span class="o">.</span><span class="na">toExternalForm</span><span class="o">());</span>
                <span class="kd">final</span> <span class="nc">NodeList</span> <span class="n">nodes</span> <span class="o">=</span> <span class="o">(</span><span class="nc">NodeList</span><span class="o">)</span> <span class="no">XPATH_ENTITY_CLASS_TEXT</span><span class="o">.</span><span class="na">evaluate</span><span class="o">(</span><span class="n">document</span><span class="o">,</span> <span class="nc">XPathConstants</span><span class="o">.</span><span class="na">NODESET</span><span class="o">);</span>
    
                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nodes</span><span class="o">.</span><span class="na">getLength</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                    <span class="kd">final</span> <span class="nc">String</span> <span class="n">entityClassName</span> <span class="o">=</span> <span class="n">nodes</span><span class="o">.</span><span class="na">item</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">getNodeValue</span><span class="o">();</span>
    
                    <span class="cm">/*
                     * Check for duplicates and only add new classes.
                     */</span>
                    <span class="k">if</span> <span class="o">(!</span><span class="n">classNodeExists</span><span class="o">(</span><span class="n">masterDocument</span><span class="o">,</span> <span class="n">entityClassName</span><span class="o">))</span> <span class="o">{</span>
                        <span class="no">LOGGER</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; entity class: %s found. Adding to persistence.xml"</span><span class="o">,</span> <span class="n">entityClassName</span><span class="o">));</span>
    
                        <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                            <span class="n">puNode</span><span class="o">.</span><span class="na">insertBefore</span><span class="o">(</span><span class="n">masterDocument</span><span class="o">.</span><span class="na">createComment</span><span class="o">(</span><span class="s">" from "</span> <span class="o">+</span> <span class="n">url</span><span class="o">.</span><span class="na">toExternalForm</span><span class="o">()</span> <span class="o">+</span> <span class="s">" "</span><span class="o">),</span> <span class="n">propertiesNode</span><span class="o">);</span>
                            <span class="n">puNode</span><span class="o">.</span><span class="na">insertBefore</span><span class="o">(</span><span class="n">masterDocument</span><span class="o">.</span><span class="na">createTextNode</span><span class="o">(</span><span class="s">"\n"</span><span class="o">),</span> <span class="n">propertiesNode</span><span class="o">);</span>
                        <span class="o">}</span>
                        <span class="kd">final</span> <span class="nc">Node</span> <span class="n">child</span> <span class="o">=</span> <span class="n">masterDocument</span><span class="o">.</span><span class="na">createElement</span><span class="o">(</span><span class="s">"class"</span><span class="o">);</span>
                        <span class="n">child</span><span class="o">.</span><span class="na">appendChild</span><span class="o">(</span><span class="n">masterDocument</span><span class="o">.</span><span class="na">createTextNode</span><span class="o">(</span><span class="n">entityClassName</span><span class="o">));</span>
                        <span class="c1">// The entity classes must be appended before the properties to successfully validate.</span>
                        <span class="n">puNode</span><span class="o">.</span><span class="na">insertBefore</span><span class="o">(</span><span class="n">child</span><span class="o">,</span> <span class="n">propertiesNode</span><span class="o">);</span>
                        <span class="n">puNode</span><span class="o">.</span><span class="na">insertBefore</span><span class="o">(</span><span class="n">masterDocument</span><span class="o">.</span><span class="na">createTextNode</span><span class="o">(</span><span class="s">"\n"</span><span class="o">),</span> <span class="n">propertiesNode</span><span class="o">);</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
    
            <span class="k">return</span> <span class="nf">documentToString</span><span class="o">(</span><span class="n">masterDocument</span><span class="o">);</span>
        <span class="o">}</span>
    
        <span class="cm">/**
         * &lt;p&gt;
         * This method will provide a {@link URL} to a virtual file stored in Random Access Memory (RAM) using
         * {@link FileSystemManager}.The method is sufficiently abstract to store any {@code String} data.&lt;/p&gt;
         * &lt;p&gt;
         * The implementation in this class will be used to store our merged persistence.xml files. This way we can avoid
         * storing the merged file on the operating system.&lt;/p&gt;
         *
         * @param data The data to be stored to a virtual file in RAM.
         * @return The {@link URL} to the virtual file in RAM.
         */</span>
        <span class="kd">private</span> <span class="no">URL</span> <span class="nf">getMergedURL</span><span class="o">(</span><span class="kd">final</span> <span class="nc">String</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="nc">FileSystemManager</span> <span class="n">manager</span> <span class="o">=</span> <span class="no">VFS</span><span class="o">.</span><span class="na">getManager</span><span class="o">();</span>
                <span class="c1">// The EntityManagerFactory will scan a pattern like PROJECT_NAME/META-INF/ for persistence.xml file.</span>
                <span class="nc">FileObject</span> <span class="n">pxml</span> <span class="o">=</span> <span class="n">manager</span><span class="o">.</span><span class="na">resolveFile</span><span class="o">(</span><span class="s">"ram://RAM_MERGED_PERSISTENCE/META-INF/persistence.xml"</span><span class="o">);</span>
                <span class="n">pxml</span><span class="o">.</span><span class="na">createFile</span><span class="o">();</span>
                <span class="k">try</span> <span class="o">(</span><span class="nc">OutputStream</span> <span class="n">os</span> <span class="o">=</span> <span class="n">pxml</span><span class="o">.</span><span class="na">getContent</span><span class="o">().</span><span class="na">getOutputStream</span><span class="o">())</span> <span class="o">{</span>
                    <span class="nc">IOUtils</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">data</span><span class="o">,</span> <span class="n">os</span><span class="o">,</span> <span class="nc">Charset</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">"UTF-8"</span><span class="o">));</span>
                <span class="o">}</span>
                <span class="k">try</span> <span class="o">(</span><span class="nc">InputStream</span> <span class="n">is</span> <span class="o">=</span> <span class="n">pxml</span><span class="o">.</span><span class="na">getContent</span><span class="o">().</span><span class="na">getInputStream</span><span class="o">())</span> <span class="o">{</span>
                    <span class="no">LOGGER</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="nc">IOUtils</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">is</span><span class="o">,</span> <span class="nc">Charset</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">"UTF-8"</span><span class="o">)));</span>
                <span class="o">}</span>
                <span class="k">return</span> <span class="n">pxml</span><span class="o">.</span><span class="na">getURL</span><span class="o">();</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">FileSystemException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
                <span class="no">LOGGER</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">"Could not create RAM filesystem."</span><span class="o">,</span> <span class="n">ex</span><span class="o">);</span>
                <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
                <span class="no">LOGGER</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">"An exception occurred while trying to generate merged URL"</span><span class="o">,</span> <span class="n">ex</span><span class="o">);</span>
                <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
    
        <span class="cm">/**
         * This checks the provided master {@literal persistence.xml} {@link Document} for the existence of a class node.
         *
         * @param masterDocument The document to evaluate.
         * @param className The name of class to check to see if it already exists.
         * @return {@literal true} if the class already exists and {@literal false} otherwise.
         */</span>
        <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">classNodeExists</span><span class="o">(</span><span class="nc">Document</span> <span class="n">masterDocument</span><span class="o">,</span> <span class="nc">String</span> <span class="n">className</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">boolean</span> <span class="n">result</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
            <span class="kd">final</span> <span class="nc">NodeList</span> <span class="n">nodeList</span><span class="o">;</span>
    
            <span class="k">try</span> <span class="o">{</span>
                <span class="n">nodeList</span> <span class="o">=</span> <span class="o">(</span><span class="nc">NodeList</span><span class="o">)</span> <span class="no">XPATH_ENTITY_CLASS_TEXT</span><span class="o">.</span><span class="na">evaluate</span><span class="o">(</span><span class="n">masterDocument</span><span class="o">,</span> <span class="nc">XPathConstants</span><span class="o">.</span><span class="na">NODESET</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">XPathExpressionException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
                <span class="no">LOGGER</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">"The provided persistence.xml contains no class entries"</span><span class="o">,</span> <span class="n">ex</span><span class="o">);</span>
                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
            <span class="o">}</span>
    
            <span class="nc">String</span> <span class="n">masterEntityClassName</span><span class="o">;</span>
    
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">nodeList</span><span class="o">.</span><span class="na">getLength</span><span class="o">();</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">masterEntityClassName</span> <span class="o">=</span> <span class="n">nodeList</span><span class="o">.</span><span class="na">item</span><span class="o">(</span><span class="n">j</span><span class="o">).</span><span class="na">getNodeValue</span><span class="o">();</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">masterEntityClassName</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">className</span><span class="o">))</span> <span class="o">{</span>
                    <span class="n">result</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
        <span class="o">}</span>
    
    <span class="o">}</span>
</code></pre></div></div>

<p>The implementation is simply a matter of doing a switch on the <code class="highlighter-rouge">ClassLoader</code> as shown below.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    
            <span class="nc">ClassLoader</span> <span class="n">contextClassLoader</span> <span class="o">=</span> <span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getContextClassLoader</span><span class="o">();</span>
            <span class="nc">PersistenceClassLoader</span> <span class="n">cl</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PersistenceClassLoader</span><span class="o">(</span><span class="n">contextClassLoader</span><span class="o">);</span>
    
            <span class="c1">// We must set the Classloader to use our loader BEFORE calling Persistence.Persistence.createEntityManagerFactory()</span>
            <span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">setContextClassLoader</span><span class="o">(</span><span class="n">cl</span><span class="o">);</span>
    
            <span class="nc">EntityManagerFactory</span> <span class="n">entityManagerFactory</span> <span class="o">=</span> <span class="nc">Persistence</span><span class="o">.</span><span class="na">createEntityManagerFactory</span><span class="o">(</span><span class="s">"example-pu"</span><span class="o">);</span>
    
            <span class="c1">//Reset the classloader</span>
            <span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">setContextClassLoader</span><span class="o">(</span><span class="n">contextClassLoader</span><span class="o">);</span>
    
            <span class="nc">EntityManager</span> <span class="n">em</span> <span class="o">=</span> <span class="n">entityManagerFactory</span><span class="o">.</span><span class="na">createEntityManager</span><span class="o">();</span>
    
            <span class="o">...</span>
        <span class="o">}</span>
</code></pre></div></div>
<h1 id="conclusion">Conclusion</h1>

<p>The Java Persistence API (JPA) is a great technology, but has some limitations with regards to loading multiple <em>persistence.xml</em> files. We can use <code class="highlighter-rouge">Classloader</code> magic to accomplish loading multiple <em>persistence.xml</em> files.</p>

<p>This code may not work as expected on later versions of Java. At the time of this writing, Java 8 is still used by most of the enterprise clients I work with.</p>

	  ]]></description>
	</item>

	<item>
	  <title>JS Equality Table</title>
	  <link>//2019-03-27-js-equality-table.html</link>
	  <author></author>
	  <pubDate>2019-03-27T15:25:39+00:00</pubDate>
	  <guid>//2019-03-27-js-equality-table.html</guid>
	  <description><![CDATA[
	     <p>It seems I am always looking for the difference between <strong>==</strong> and <strong>===</strong>.  I was looking at a response to a question on Stackoverflow when I found this gem. I am publishing it here in case anyone else needs a graphical explanation.</p>

<p><a href="https://dorey.github.io/JavaScript-Equality-Table/">JavaScript-Equality-Table</a></p>

	  ]]></description>
	</item>

	<item>
	  <title>Simplifying Command Line Processing</title>
	  <link>//2018-11-09-simplifying-command-line-processing.html</link>
	  <author></author>
	  <pubDate>2018-11-09T19:59:47+00:00</pubDate>
	  <guid>//2018-11-09-simplifying-command-line-processing.html</guid>
	  <description><![CDATA[
	     <h2 id="introduction">Introduction</h2>

<p>I like many of you have spent many hours using <a href="https://commons.apache.org/proper/commons-cli/">Apache Commons CLI</a> to create command line options. It does a great job. As the number of options, or groups increases, the framework begins to show its rough edges. A tool called <a href="http://jcommander.org/">JCommander</a> which I mentioned in my post <a href="https://blog.johnyeary.com/2018/09/useful-java-frameworks/">Useful Java Frameworks</a> really begins to shine. I will present two versions of the same command line processing, and let you decide.</p>

<h2 id="clijava">CLI.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">bluelotussoftware</span><span class="o">.</span><span class="na">cli</span><span class="o">;</span>
    
    <span class="kn">import</span> <span class="nn">java.util.logging.Level</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">java.util.logging.Logger</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">org.apache.commons.cli.AlreadySelectedException</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">org.apache.commons.cli.CommandLine</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">org.apache.commons.cli.CommandLineParser</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">org.apache.commons.cli.DefaultParser</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">org.apache.commons.cli.HelpFormatter</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">org.apache.commons.cli.Option</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">org.apache.commons.cli.OptionGroup</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">org.apache.commons.cli.Options</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">org.apache.commons.cli.ParseException</span><span class="o">;</span>
    
    <span class="cm">/**
     *
     * @author &lt;a href="mailto:jyeary@bluelotussoftware.com"&gt;John Yeary&lt;/a&gt;
     * @version 1.0.0
     */</span>
    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">CLI</span> <span class="o">{</span>
    
        <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Options</span> <span class="no">OPTIONS</span><span class="o">;</span>
    
        <span class="kd">static</span> <span class="o">{</span>
            <span class="no">OPTIONS</span> <span class="o">=</span> <span class="no">CLI</span><span class="o">.</span><span class="na">createOptions</span><span class="o">();</span>
        <span class="o">}</span>
    
        <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    
            <span class="nc">CommandLineParser</span> <span class="n">commandLineParser</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DefaultParser</span><span class="o">();</span>
    
            <span class="k">try</span> <span class="o">{</span>
                <span class="nc">CommandLine</span> <span class="n">cmd</span> <span class="o">=</span> <span class="n">commandLineParser</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="no">OPTIONS</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
    
                <span class="k">if</span> <span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">getOptions</span><span class="o">().</span><span class="na">length</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                    <span class="no">CLI</span><span class="o">.</span><span class="na">help</span><span class="o">();</span>
                    <span class="k">return</span><span class="o">;</span>
                <span class="o">}</span>
    
                <span class="k">if</span> <span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">hasOption</span><span class="o">(</span><span class="sc">'v'</span><span class="o">))</span> <span class="o">{</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Product Version: 1.0.0"</span><span class="o">);</span>
                <span class="o">}</span>
    
                <span class="k">if</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">hasOption</span><span class="o">(</span><span class="sc">'i'</span><span class="o">))</span> <span class="o">{</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Starting interactive mode."</span><span class="o">);</span>
                <span class="o">}</span>
    
                <span class="k">if</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">hasOption</span><span class="o">(</span><span class="s">"start"</span><span class="o">))</span> <span class="o">{</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Starting application"</span><span class="o">);</span>
                <span class="o">}</span>
    
                <span class="k">if</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">hasOption</span><span class="o">(</span><span class="s">"stop"</span><span class="o">))</span> <span class="o">{</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Stopping application"</span><span class="o">);</span>
                <span class="o">}</span>
    
    
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">AlreadySelectedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="no">CLI</span><span class="o">.</span><span class="na">help</span><span class="o">();</span>
                <span class="nc">Logger</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="no">CLI</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">()).</span><span class="na">log</span><span class="o">(</span><span class="nc">Level</span><span class="o">.</span><span class="na">SEVERE</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">ParseException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="no">CLI</span><span class="o">.</span><span class="na">help</span><span class="o">();</span>
                <span class="nc">Logger</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="no">CLI</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">()).</span><span class="na">log</span><span class="o">(</span><span class="nc">Level</span><span class="o">.</span><span class="na">SEVERE</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    
        <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">help</span><span class="o">()</span> <span class="o">{</span>
            <span class="nc">HelpFormatter</span> <span class="n">formatter</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HelpFormatter</span><span class="o">();</span>
            <span class="n">formatter</span><span class="o">.</span><span class="na">printHelp</span><span class="o">(</span><span class="s">"CLI"</span><span class="o">,</span> <span class="no">OPTIONS</span><span class="o">);</span>
        <span class="o">}</span>
    
        <span class="kd">private</span> <span class="kd">static</span> <span class="nc">Options</span> <span class="nf">createOptions</span><span class="o">()</span> <span class="o">{</span>
            <span class="nc">Options</span> <span class="n">options</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Options</span><span class="o">();</span>
    
            <span class="nc">OptionGroup</span> <span class="n">mode</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">OptionGroup</span><span class="o">();</span>
    
            <span class="nc">Option</span> <span class="n">help</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Option</span><span class="o">(</span><span class="s">"help"</span><span class="o">,</span> <span class="s">"Help"</span><span class="o">);</span>
    
            <span class="nc">Option</span> <span class="n">interactive</span> <span class="o">=</span> <span class="nc">Option</span><span class="o">.</span><span class="na">builder</span><span class="o">(</span><span class="s">"i"</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">longOpt</span><span class="o">(</span><span class="s">"interactive"</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">desc</span><span class="o">(</span><span class="s">"Starts the processor in interactive mode."</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">build</span><span class="o">();</span>
    
            <span class="nc">Option</span> <span class="n">start</span> <span class="o">=</span> <span class="nc">Option</span><span class="o">.</span><span class="na">builder</span><span class="o">().</span><span class="na">longOpt</span><span class="o">(</span><span class="s">"start"</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">desc</span><span class="o">(</span><span class="s">"Start the application."</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">build</span><span class="o">();</span>
    
            <span class="nc">Option</span> <span class="n">stop</span> <span class="o">=</span> <span class="nc">Option</span><span class="o">.</span><span class="na">builder</span><span class="o">().</span><span class="na">longOpt</span><span class="o">(</span><span class="s">"stop"</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">desc</span><span class="o">(</span><span class="s">"Stop the application."</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">build</span><span class="o">();</span>
    
            <span class="nc">Option</span> <span class="n">properties</span> <span class="o">=</span> <span class="nc">Option</span><span class="o">.</span><span class="na">builder</span><span class="o">(</span><span class="s">"p"</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">longOpt</span><span class="o">(</span><span class="s">"properties"</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">desc</span><span class="o">(</span><span class="s">"List all properties"</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">build</span><span class="o">();</span>
    
            <span class="nc">Option</span> <span class="n">quit</span> <span class="o">=</span> <span class="nc">Option</span><span class="o">.</span><span class="na">builder</span><span class="o">(</span><span class="s">"q"</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">longOpt</span><span class="o">(</span><span class="s">"quit"</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">desc</span><span class="o">(</span><span class="s">"Quit the application."</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">build</span><span class="o">();</span>
    
            <span class="nc">Option</span> <span class="n">version</span> <span class="o">=</span> <span class="nc">Option</span><span class="o">.</span><span class="na">builder</span><span class="o">(</span><span class="s">"v"</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">longOpt</span><span class="o">(</span><span class="s">"version"</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">desc</span><span class="o">(</span><span class="s">"The current version of the application."</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">build</span><span class="o">();</span>
    
            <span class="n">mode</span><span class="o">.</span><span class="na">addOption</span><span class="o">(</span><span class="n">interactive</span><span class="o">);</span>
            <span class="n">mode</span><span class="o">.</span><span class="na">addOption</span><span class="o">(</span><span class="n">start</span><span class="o">);</span>
            <span class="n">mode</span><span class="o">.</span><span class="na">addOption</span><span class="o">(</span><span class="n">stop</span><span class="o">);</span>
    
            <span class="n">options</span><span class="o">.</span><span class="na">addOptionGroup</span><span class="o">(</span><span class="n">mode</span><span class="o">);</span>
            <span class="n">options</span><span class="o">.</span><span class="na">addOption</span><span class="o">(</span><span class="n">help</span><span class="o">);</span>
            <span class="n">options</span><span class="o">.</span><span class="na">addOption</span><span class="o">(</span><span class="n">properties</span><span class="o">);</span>
            <span class="n">options</span><span class="o">.</span><span class="na">addOption</span><span class="o">(</span><span class="n">quit</span><span class="o">);</span>
            <span class="n">options</span><span class="o">.</span><span class="na">addOption</span><span class="o">(</span><span class="n">version</span><span class="o">);</span>
    
            <span class="k">return</span> <span class="n">options</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>usage: CLI
 -help              Help
 -i,--interactive   Starts the processor in interactive mode.
 -p,--properties    List all properties
 -q,--quit          Quit the application.
    --start         Start the application.
    --stop          Stop the application.
 -v,--version       The current version of the application.
</code></pre></div></div>

<h2 id="jcommanderclijava">JCommanderCLI.java</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">bluelotussoftware</span><span class="o">.</span><span class="na">cli</span><span class="o">;</span>
    
    <span class="kn">import</span> <span class="nn">com.beust.jcommander.JCommander</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">com.beust.jcommander.Parameter</span><span class="o">;</span>
    
    <span class="cm">/**
     *
     * @author &lt;a href="mailto:jyeary@bluelotussoftware.com"&gt;John Yeary&lt;/a&gt;
     * @version 1.0.0
     */</span>
    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">JCommanderCLI</span> <span class="o">{</span>
    
        <span class="nd">@Parameter</span><span class="o">(</span><span class="n">names</span> <span class="o">=</span> <span class="o">{</span><span class="s">"-v"</span><span class="o">,</span> <span class="s">"--version"</span><span class="o">},</span> <span class="n">description</span> <span class="o">=</span> <span class="s">"The current version of the application."</span><span class="o">)</span>
        <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">version</span><span class="o">;</span>
        <span class="nd">@Parameter</span><span class="o">(</span><span class="n">names</span> <span class="o">=</span> <span class="o">{</span><span class="s">"-h"</span><span class="o">,</span> <span class="s">"--help"</span><span class="o">},</span> <span class="n">description</span> <span class="o">=</span> <span class="s">"Provides help to the user."</span><span class="o">,</span> <span class="n">help</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
        <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">help</span><span class="o">;</span>
        <span class="nd">@Parameter</span><span class="o">(</span><span class="n">names</span> <span class="o">=</span> <span class="o">{</span><span class="s">"-q"</span><span class="o">,</span> <span class="s">"--quit"</span><span class="o">},</span> <span class="n">description</span> <span class="o">=</span> <span class="s">"Quit the application."</span><span class="o">)</span>
        <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">quit</span><span class="o">;</span>
        <span class="nd">@Parameter</span><span class="o">(</span><span class="n">names</span> <span class="o">=</span> <span class="o">{</span><span class="s">"-i"</span><span class="o">,</span> <span class="s">"--interactive"</span><span class="o">},</span> <span class="n">description</span> <span class="o">=</span> <span class="s">"Starts the processor in interactive mode."</span><span class="o">)</span>
        <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">interactive</span><span class="o">;</span>
        <span class="nd">@Parameter</span><span class="o">(</span><span class="n">names</span> <span class="o">=</span> <span class="s">"--start"</span><span class="o">,</span> <span class="n">description</span> <span class="o">=</span> <span class="s">"Start the application."</span><span class="o">)</span>
        <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">start</span><span class="o">;</span>
        <span class="nd">@Parameter</span><span class="o">(</span><span class="n">names</span> <span class="o">=</span> <span class="s">"--stop"</span><span class="o">,</span> <span class="n">description</span> <span class="o">=</span> <span class="s">"Stop the application."</span><span class="o">)</span>
        <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">stop</span><span class="o">;</span>
        <span class="nd">@Parameter</span><span class="o">(</span><span class="n">names</span> <span class="o">=</span> <span class="o">{</span><span class="s">"-p"</span><span class="o">,</span> <span class="s">"--properties"</span><span class="o">},</span> <span class="n">description</span> <span class="o">=</span> <span class="s">"List all of the configured properties."</span><span class="o">)</span>
        <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">props</span><span class="o">;</span>
    
        <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    
            <span class="nc">JCommanderCLI</span> <span class="n">clic</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JCommanderCLI</span><span class="o">();</span>
            <span class="nc">JCommander</span> <span class="n">jc</span> <span class="o">=</span> <span class="nc">JCommander</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">addObject</span><span class="o">(</span><span class="n">clic</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">build</span><span class="o">();</span>
            <span class="n">jc</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>
            <span class="n">jc</span><span class="o">.</span><span class="na">setProgramName</span><span class="o">(</span><span class="nc">JCommanderCLI</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getCanonicalName</span><span class="o">());</span>
    
            <span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">jc</span><span class="o">.</span><span class="na">usage</span><span class="o">();</span>
                <span class="k">return</span><span class="o">;</span>
            <span class="o">}</span>
    
            <span class="n">clic</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
        <span class="o">}</span>
    
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
    
            <span class="k">if</span> <span class="o">(</span><span class="n">version</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"CLICommander version 1.0.0"</span><span class="o">);</span>
            <span class="o">}</span>
    
            <span class="k">if</span> <span class="o">(</span><span class="n">interactive</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Starting interactive mode."</span><span class="o">);</span>
            <span class="o">}</span>
    
            <span class="k">if</span> <span class="o">(</span><span class="n">start</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Starting application"</span><span class="o">);</span>
            <span class="o">}</span>
    
            <span class="k">if</span> <span class="o">(</span><span class="n">stop</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Stopping application"</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Usage: com.bluelotussoftware.cli.JCommanderCLI [options]
  Options:
    -h, --help
      Provides help to the user.
    -i, --interactive
      Starts the processor in interactive mode.
      Default: false
    -p, --properties
      List all of the configured properties.
      Default: false
    -q, --quit
      Quit the application.
      Default: false
    --start
      Start the application.
      Default: false
    --stop
      Stop the application.
      Default: false
    -v, --version
      The current version of the application.
      Default: false
</code></pre></div></div>

<h2 id="results">Results</h2>

<p>If you have come to the same conclusion as me, then you may want to simply include JCommander in your next development project. If you are already invested in Commons CLI, you can spend the time to convert it, but don’t waste time if you are not encountering issues.</p>

<p>The Maven dependency can be found here:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;dependency&gt;
  &lt;groupId&gt;com.beust&lt;/groupId&gt;
  &lt;artifactId&gt;jcommander&lt;/artifactId&gt;
  &lt;version&gt;1.72&lt;/version&gt;
&lt;/dependency&gt;
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>SPAMC and Java</title>
	  <link>//2018-09-20-spamc-and-java.html</link>
	  <author></author>
	  <pubDate>2018-09-20T20:45:12+00:00</pubDate>
	  <guid>//2018-09-20-spamc-and-java.html</guid>
	  <description><![CDATA[
	     <h2 id="introduction">Introduction</h2>

<p>I was tasked with trying to find a quick way to test if a SpamAssassin server was running. The idea was that we needed to not only check it, but if there was a framework out there that would make it simple.</p>

<p>In fact, we had developed our own framework over time by various developers with different approaches. However, I would like to replace it with something that will work for us that was designed from the bottom up as an implementation of SPAMC for Java. I thought it might be something I would end up writing, but alas I found one that is well written and easy to use.</p>

<h2 id="spamc">spamc</h2>

<p><a href="https://github.com/alphabox/spamc">spamc</a> written by Daniel Mecsei at Alphabox does the job. It is an F/OSS framework that makes communicating with SpamAssassin extremely easy. The Github project has an example that I won’t repeat here, but trust me, it is easy to implement and use.</p>

<h2 id="as-for-me">As for me…</h2>

<p>I needed to test the service and wrote a quick implementation that worked something like this.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">example</span><span class="o">.</span><span class="na">spamc</span><span class="o">.</span><span class="na">client</span><span class="o">;</span>
    
    <span class="kn">import</span> <span class="nn">hu.alphabox.spamc.SAClient</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">hu.alphabox.spamc.SACommand</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">hu.alphabox.spamc.SARequest</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">hu.alphabox.spamc.SAResponse</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.*;</span>
    
    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">SPAMCTest</span> <span class="o">{</span>
    
        <span class="kd">public</span> <span class="nf">SPAMCTest</span><span class="o">()</span> <span class="o">{</span>
        <span class="o">}</span>
    
        <span class="nd">@Test</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testPong</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
            <span class="nc">SARequest</span> <span class="n">saRequest</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SARequest</span><span class="o">();</span>
            <span class="n">saRequest</span><span class="o">.</span><span class="na">setCommand</span><span class="o">(</span><span class="nc">SACommand</span><span class="o">.</span><span class="na">PING</span><span class="o">);</span>
            <span class="n">saRequest</span><span class="o">.</span><span class="na">setMessage</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
            <span class="nc">SAClient</span> <span class="n">client</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SAClient</span><span class="o">(</span><span class="s">"localhost"</span><span class="o">,</span> <span class="mi">783</span><span class="o">);</span>
            <span class="nc">SAResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">sendRequest</span><span class="o">(</span><span class="n">saRequest</span><span class="o">);</span>
            <span class="nc">String</span> <span class="n">expected</span> <span class="o">=</span> <span class="s">"SPAMD/1.5 0 PONG\r\n"</span><span class="o">;</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">getHeaders</span><span class="o">());</span>
            <span class="n">assertEquals</span><span class="o">(</span><span class="n">expected</span><span class="o">,</span> <span class="n">response</span><span class="o">.</span><span class="na">getHeaders</span><span class="o">());</span>
        <span class="o">}</span>
    <span class="o">}</span>
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>Wordpress</title>
	  <link>//2017-10-06-wordpress.html</link>
	  <author></author>
	  <pubDate>2017-10-06T00:00:00+00:00</pubDate>
	  <guid>//2017-10-06-wordpress.html</guid>
	  <description><![CDATA[
	     <p>I found Wordpress easier to use for my needs. The jekyll solution works for a lot of people, but I found that converting a Blogger blog to it was more difficult. If you are interested in my personal blog, please click on the links on the main page for my blogs.</p>

	  ]]></description>
	</item>

	<item>
	  <title>A new Blogging Platform with Github Pages</title>
	  <link>//2015-04-02-a-new-blog-site.html</link>
	  <author></author>
	  <pubDate>2015-04-02T00:00:00+00:00</pubDate>
	  <guid>//2015-04-02-a-new-blog-site.html</guid>
	  <description><![CDATA[
	     <p>I am looking at exporting my pages from Blogger to a platform where I can have more control over the layout. If this <em>endeavor</em>
works, I will look at moving my crown jewel from Blogger too.</p>

<p>I want to explore how difficult it is to get this setup and working effectively.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Censorship in Asia</title>
	  <link>//2009-09-14-censorship-in-asia.html</link>
	  <author></author>
	  <pubDate>2009-09-14T20:29:00+00:00</pubDate>
	  <guid>//2009-09-14-censorship-in-asia.html</guid>
	  <description><![CDATA[
	     <p>I read a very good article this morning on the growing censorship of the Internet and blogging in Asia. The article: <a href="http://online.wsj.com/article/SB125288982580207609.html" title="Wall Street Journal Article - Web Censoring Widens Across Southeast Asia">Web Censoring Widens Across Southeast Asia</a> was published in the Wall Street Journal for Monday, 14 September 2009.</p>

<p>The article details a number of efforts by governments to systematically stymie opposition groups, political dissenters, or individual bloggers. I am alarmed that the government in Malaysia would invoke a colonial era Internal Security Act to detain individuals for two years without trial.</p>

<p>The government is trying to put on a friendly moderate face to encourage western companies, and investors to help develop their growing economy. The problem is that laws like the Internal Security Act undermine this moderate view of Malaysia.</p>

<p>The article indicates that 63% of people in Malaysia use the Internet. This is incredible and really provides an opportunity for the government to engage their people.</p>

<p>I am not trying to single out Malaysia by any means, but the closest county in Internet users in the article is Iran with 32%. I don’t see them making any changes to become more open soon.</p>

	  ]]></description>
	</item>


</channel>
</rss>
